knitr::opts_chunk$set(echo = TRUE)
rm(list = ls())
popdata = read.csv("POPTHM1.csv",header = T)
pop = popdata$POPTHM
date = as.Date(popdata$DATE,format = "%Y/%m/%d")
plot(pop)
pop.ts = ts(pop,start = c(1990,3),frequency =  12)
plot.ts(pop.ts,type = "l", xlab = "Monthly", ylab = "USA population data", main = "USA population for years 1990-2021")
# Step1:  1st difference
dpop = diff(pop.ts)
t = c(1:length(dpop))
plot(t,dpop,type = "l")
# Step 2:  fit the trend
lm1 = lm(dpop~poly(t,4))
dpop_lm1_fit=lm1$fitted.values
plot(t,as.numeric(dpop),type = 'l')
lines(t,dpop_lm1_fit)
dpop_lm1_res=lm1$residuals
plot(dpop_lm1_res,type = 'l')
#待做：对于数据过拟合进行惩罚 AIC
# Step1:  1st difference
dpop = diff(pop.ts)
t = c(1:length(dpop))
plot(t,dpop,type = "l")
# Step 2:  fit the trend
lm1 = lm(dpop~poly(t,4))
dpop_lm1_fit=lm1$fitted.values
plot(t,as.numeric(dpop),type = 'l')
lines(t,dpop_lm1_fit)
dpop_lm1_res=lm1$residuals
plot(dpop_lm1_res,type = 'l')
#待做：对于数据过拟合进行惩罚 AIC
periodogram(dpop_lm1_res)
pgram(dpop_lm1_res)
knitr::opts_chunk$set(echo = TRUE)
library(astsa)
library(forecast)
library(xts)
pgram(dpop_lm1_res)
periodogram(dpop_lm1_res)
knitr::opts_chunk$set(echo = TRUE)
library(astsa)
library(forecast)
library(xts)
library(TSA)
periodogram(dpop_lm1_res)
knitr::opts_chunk$set(echo = TRUE)
library(astsa)
library(forecast)
library(xts)
library(TSA)
pgram = function(x){
m = floor(length(x)/2)
pgram = abs(fft(x)[2:(m+1)])^2/length(x)
plot(pgram[1:30], type = "h")
abline(h=0)
return(pgram)
}
pgram(dpop_lm1_res)
pgram(dpop_lm1_res[1:348])
pgram(dpop_lm1_res[1:288])
pgram(dpop_lm1_res[1:328])
pgram(dpop_lm1_res[1:324])
v1 = cos(2*pi*t/108)
v2 = sin(2*pi*t/108)
lm2 = lm(dpop_lm1_res~v1+v2)
plot(t,as.numeric(dpop_lm1_res),type = 'l')
lines(t,lm2$fitted.values)
dpop_lm2_res= lm2$residuals
plot(t,dpop_lm2_res,type = 'l')
#检测平稳性
sm.par=c(0.5,1,1,1,1,1,1,1,1,1,1,1,0.5)
mt = filter(dpop_lm2_res, sm.par/12)
sm.res = dpop_lm2_res - mt
plot(sm.res)
plot(dpop_lm2_res,type ='l')
lines(mt,col = 'red')
ddpop = diff(dpop_lm2_res,12)
plot.ts(ddpop,type = "l")
ddpop.ts = ts(ddpop,start = '1991.3',frequency = 12)
acf2(ddpop.ts,100)
library(astsa)
auto.arima(ddpop.ts)
m1 = sarima(ddpop.ts,p=3,d=0,q=7,P=0,D=0,Q=1,S=12)
m2 = sarima(ddpop.ts,p=3,d=0,q=7,P=0,D=0,Q=2,S=12)
m3 = sarima(ddpop.ts,p=3,d=0,q=7,P=0,D=0,Q=3,S=12)
#m2 fits best if we look at the LjungBox test and p-value#
m1 = sarima(ddpop.ts,p=3,d=0,q=7,P=0,D=0,Q=1,S=12)
m2 = sarima(ddpop.ts,p=3,d=0,q=7,P=0,D=0,Q=2,S=12)
m3 = sarima(ddpop.ts,p=3,d=0,q=7,P=0,D=0,Q=3,S=12)
m1 = sarima(ddpop.ts,p=3,d=0,q=7,P=0,D=0,Q=1,S=12)
m2 = sarima(ddpop.ts,p=3,d=0,q=7,P=0,D=0,Q=2,S=12)
m3 = sarima(ddpop.ts,p=3,d=0,q=7,P=0,D=0,Q=3,S=12)
#m2 fits best if we look at the LjungBox test and p-value#
m1$AIC
m2$AIC
m3$AIC
m1$AICc
m2$AICc
m3$AICc
m1$BIC
m2$BIC
m3$BIC
#question 6
#cal acf pacf
th = c(m2$fit$coef[1:3])
phi = c(m2$fit$coef[4:10],rep(0, 4), m2$fit$coef[11],rep(0, 11),m2$fit$coef[12])
T = 60
corrs = ARMAacf(ar = th,ma = phi, lag.max = T)
par.corrs = ARMAacf(ar = th,ma = phi, lag.max = T, pacf = T)
all.plot = function(x,corr,pcorr){
acf(x,lag.max = T)
points(corr[1:60],col='red',type='h')
pacf(x,lag.max = T)
points(pcorr[1:60],col='red',type='h')
}
all.plot(as.vector(ddpop.ts),corrs,par.corrs)
#Forecast
modelf1 = sarima.for(ddpop.ts,n.ahead = 12,p=3,d=0,q=7,P=0,D=0,Q=2,S=12)
sm.par=c(0.5,1,1,1,1,1,1,1,1,1,1,1,0.5)
mt = filter(dpop, sm.par/12)
sm.res = dpop - mt
plot(mt)
lines(dpop,col = 'red')
plot.ts(sm.res[7:350])
acf2(sm.res[7:350])
#auto.arima(sm.res)
model1 = sarima(sm.res[7:350],p=4,d=0,q=1,S=12,P=1,D=1,Q=2)
plot.ts(pop.ts[200:],type = "l", xlab = "Monthly", ylab = "USA population data", main = "USA population for years 1990-2021")
plot.ts(pop.ts)
plot.ts(pop.ts)
lm1 = lm(pop~t)
t
plot.ts(pop.ts)
lm1 = lm(pop~t)
pop
length(pop)
length(t)
length(pop.ts)
length(t)
plot.ts(pop.ts)
t = 1:length(pop)
lm1 = lm(pop~t)
dpop_lm1_fit=lm1$fitted.values
plot(t,as.numeric(pop),type = 'l')
lines(t,dpop_lm1_fit)
dpop_lm1_res=lm1$residuals
plot(dpop_lm1_res,type = 'l')
plot.ts(pop.ts)
t = 1:length(pop)
lm1 = lm(pop~pop(t,2))
plot.ts(pop.ts)
t = 1:length(pop)
lm1 = lm(pop~poly(t,2))
dpop_lm1_fit=lm1$fitted.values
plot(t,as.numeric(pop),type = 'l')
lines(t,dpop_lm1_fit)
dpop_lm1_res=lm1$residuals
plot(dpop_lm1_res,type = 'l')
plot.ts(dpop.ts)
plot.ts(dpop)
pop
popdata
date
popdata$date = date
popdata
popdata$date = date
month(popdata$date)
library(lubridate)
install.packages("lubridate")
library(lubridate)
library(lubridate)
month(as.POSIXlt(date, format="%d/%m/%Y"))
library(lubridate)
popdata$month = month(as.POSIXlt(date, format="%d/%m/%Y"))
popdata$date = date
month(popdata$date)
library(lubridate)
popdata$date = date
popdata$month = month(popdata$date)
popdata
library(lubridate)
popdata$date = date
popdata$month = month(popdata$date)
popdata["date", "month", "POPTHM"]
library(lubridate)
popdata$date = date
popdata$month = month(popdata$date)
popdata[["date", "month", "POPTHM"]]
library(lubridate)
popdata$date = date
popdata$month = month(popdata$date)
popdata[c("date", "month", "POPTHM")]
knitr::opts_chunk$set(echo = TRUE)
library(astsa)
library(forecast)
library(xts)
library(TSA)
library(dplyr)
pgram = function(x){
m = floor(length(x)/2)
pgram = abs(fft(x)[2:(m+1)])^2/length(x)
plot(pgram[1:30], type = "h")
abline(h=0)
return(pgram)
}
library(lubridate)
popdata$date = date
popdata$pop = popdata$POPTHM
popdata$month = month(popdata$date)
popdata[c("date", "month", "pop")]
library(lubridate)
popdata$date = date
popdata$pop = popdata$POPTHM
popdata$month = month(popdata$date)
popdata = popdata[c("date", "month", "pop")]
popdata$month = month(as.POSIXlt(date, format="%d/%m/%Y"))
plot(popdata$pop)
plot(popdata$pop[200:length(popdata$pop)])
plot(popdata$pop[300:length(popdata$pop)])
library(lubridate)
popdata$date = date
popdata$pop = popdata$POPTHM
popdata$month = month(popdata$date)
popdata$dpop = dpop
library(lubridate)
popdata$date = date
popdata$pop = popdata$POPTHM
popdata$month = month(popdata$date)
popdata$dpop = c(NA, dpop)
popdata = popdata[c("date", "month", "pop", "dpop")]
library(lubridate)
popdata$date = date
popdata$pop = popdata$POPTHM
popdata$month = month(popdata$date)
popdata$dpop = c(0, dpop)
popdata = popdata[c("date", "month", "pop", "dpop")]
month = month(popdata$date)[2:length(popdata$date)]
month
month = month(popdata$date)[2:length(popdata$date)]
t = 1:length(dpop)
model = lm(dpop ~ poly(t, degree = 4)*month)
plot(t, model$fitted.values, type = "l") + lines(dpop, col = "blue")
plot(t, model$fitted.values, type = "l")
lines(t, dpop, col = "blue")
plot(t, model$fitted.values, type = "l")
lines(t, dpop, col = "blue")
plot(t, model$residuals)
plot(t, model$fitted.values, type = "l")
lines(t, dpop, col = "blue")
plot(t, model$residuals, type = "l")
month = month(popdata$date)[2:length(popdata$date)]
t = 1:length(dpop)
model = lm(dpop ~ poly(t, degree = 2)*month)
plot(t, model$fitted.values, type = "l")
lines(t, dpop, col = "blue")
plot(t, model$residuals, type = "l")
month = month(popdata$date)[2:length(popdata$date)]
t = 1:length(dpop)
model = lm(dpop ~ poly(t, degree = 5)*month)
plot(t, model$fitted.values, type = "l")
lines(t, dpop, col = "blue")
plot(t, model$residuals, type = "l")
d9d12 = diff(diff(dpop, 12), 9)
plot.ts(d9d12)
acf2(d9d12)
